# python standard libraries
import os
import random

# PyQt5
from PyQt5 import QtWidgets
from PyQt5.QtCore import Qt
from sys import exit

# UI generated by QtDesigner and pyuic5
import main_window



class GUI:
    def __init__(self):
        os.environ["QT_AUTO_SCREEN_SCALE_FACTOR"] = "1" # used for auto scaling for different screen resolutions
        self.app = QtWidgets.QApplication([]) # required by PyQt5
        self.app.setAttribute(Qt.AA_EnableHighDpiScaling) # used for auto scaling for different screen resolutions

        # creates instance of the window
        self.MainWindow = QtWidgets.QMainWindow()
        self.window = main_window.Ui_main_window()
        self.window.setupUi(self.MainWindow)

        # instance variables
        self.blacklist = [] # used to avoid getting repeat files
        self.selected = ''

        self.connect_events() # gives buttons functionality
        self.MainWindow.show()
        exit(self.app.exec_()) # required by PyQt5



    def connect_events(self):
        '''Gives buttons functionality
        '''
        self.window.reset_button.clicked.connect(self.reset_blacklist)
        self.window.random_button.clicked.connect(self.select_random)
        self.window.open_button.clicked.connect(self.open_selected)



    def reset_blacklist(self):
        self.blacklist = []



    def select_random(self):
        # get user data
        directory = self.window.directory_field.displayText()
        depth = int(self.window.depth_field.displayText()) # 1 is the minimum

        directory_depth = directory.count('\\') # used to count depth
        valid_files = []

        # gets a list of all valid files in directory with depth to randomly choose from
        for root, dirs, files in os.walk(directory):
            if root.count('\\') == directory_depth + depth - 1:
                valid_files += [f'{root}\\{foldername}' for foldername in dirs if f'{root}\\{foldername}' not in self.blacklist]
                valid_files += [f'{root}\\{filename}' for filename in files if f'{root}\\{filename}' not in self.blacklist]

        # randomly select and show selected file
        try:
            self.selected = random.choice(valid_files)
            self.window.output_box.setText(self.selected)
        except IndexError:
            # occurs if all files are in the blacklist
            self.window.output_box.setText('Already selected every file. Try pressing the "Reset Repeats" button')

        # add to blacklist if user wants
        if self.window.no_repeat_radio.isChecked():
            self.blacklist.append(self.selected)



    def open_selected(self):
        os.startfile(self.selected)







if __name__ == "__main__":
    GUI()